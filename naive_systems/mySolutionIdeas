# The main ideas of my solution

## start up the whole program
The main thing needed to done is to write `CMakeLists.txt`, this program's file
is easy to finish. Just put all the `*.c` file to `add_executable()` after setting
the cmake version, project name and C_STANDARD.


**I run this project in CLion, the CLion's `Working directory` should be set to the current project path
for opening the `.json` file.**


I write this file like this:
```cmake
cmake_minimum_required(VERSION 3.16)

project(screening_test C)

SET(CMAKE_C_STANDARD 11)

add_executable(main main.c parse.c third_party/cJSON/cJSON.c)
```

## Implement the method `int parse_query_string(char* url, struct query_parameter** out)`
My algorithm complexity is O(n), assuming the length of url is n. Each character in the url is just needed to visited once.

I built up a temporary array `data` to store the extracted results, the count of
strings is recorded at the same time. After that,  I use malloc to apply the specific
space for `*out`. Attention, `out` is the pointer of the pointer, so when it is used,
you should write like this: `(*out)[0].name` or `(*out)[0].value`. I spent a lot of tiem
debugging this situation.

In this algorithm, we should deal with the problems when we create corner cases, escape
characters and empty value. You can get the details in my comments of the following code.
```c
int parse_query_string(char* url, struct query_parameter** out)
{
    int len = strlen(url);
    // Just output the url for convenience
    for (int i = 0; i < len; ++ i) {
        printf("%c", url[i]);
    }
    puts("");

    //! Here we begin
    char data[MAX_LEN][MAX_LEN];
    // push each valid string into data (each parameter and its value)
    int cnt = 0, cnt_name = 0, cnt_value = 0;
    bool start = false;
    for (int i = 0, idx = 0; i < len; ++ i) {
        // It means we should start to extract the parameters.
        // Only the first `?` is valid
        if (url[i] == '?' && !start) {
            start = true;
            continue;
        }

        // The `=` should be after the `?`
        // We obtain the value of the current parameter, or we start to extract a new parameter
        if (start) {
            if (url[i] == '=') {
                data[cnt][idx] = '\0';
                // The value maybe null, we should handle this.
                if (i == len - 1 || url[i + 1] == '&') {
                    idx = 0;
                    data[++cnt][idx] = '\0';
                    cnt_value ++;
                    i ++;
                }
                cnt ++;
                cnt_name ++;
                idx = 0;
                continue;
            } else if (url[i] == '&') {
                data[cnt][idx] = '\0';
                cnt++;
                cnt_value ++;
                idx = 0;
                continue;
            }
        }
        if (start) {
            // Special case: Notice that the url could include `\`,
            // and we should think it means there exists an escape character.
            // And, double `\`s equal single `\`, i.e. `\\` => `\`
            if (url[i] == '\\')
                data[cnt][idx++] = url[++i];
            else
                data[cnt][idx++] = url[i];
        }
        if (i == len - 1 && cnt_value == cnt_name - 1) {
            data[cnt][idx] = '\0';
            cnt++;
        }
    }

    // copy each string into out
    *out = (struct query_parameter*) malloc(sizeof(struct query_parameter) * cnt);
    for (int i = 0; i < cnt / 2; ++ i) {
        (*out)[i].name = data[2 * i];
        (*out)[i].value = data[2 * i + 1];
    }
    return cnt / 2;
}
```

## About constructing test cases
The first thing I think about is escape characters. It could exist something
characters such as `&` in those parameters. Thus, the `parse_query_string`
method should be robust to deal with it. In this case, the url need to exist the
`\` before escape characters.


What's more, some parameters' value could be null, for example, there could exist
the url like "https://aaa.com/?a=&b=&c=&d=helloworld". The result is a="", b="",
c="", d="helloworld". Therefore, the empty parameters should also be paid attention to.

I create two more testcases:
```json
    {
        "input": "http://example.top/hhh?id=12\\=34&data_type=arti\\&cle&user=john",
        "output": {
            "id" :"12=34",
            "data_type": "arti&cle",
            "user": "john"
        }
    }
```
```json
  {
        "input": "https://example.com/?a=&q=c+\\\\programming?+language&t=h_&ia=\\\\web&b=",
        "output": {
            "a": "",
            "q": "c+\\programming?+language",
            "t": "h_",
            "ia": "\\web",
            "b": ""
        }
    }
```
## Fix memory errors in main.c.
The first error I found is in `url = strdup(input->valuestring);`. The method
`strdup` returns an identical malloc'd string, so we need free it. Add the following
line:
```c
free(url);
```
Remember we have malloced the `params` in `main()`, therefore, we should free it
in `main()` after we use it.
```c
free(params);
```
